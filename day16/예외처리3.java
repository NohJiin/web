package 상속;

public class 예외처리3 {

	public static void main(String[] args) {
		// 아래 코드를 분석해보고 문제가 생길 여지가 잇는 코드가
		// 에러가 발생했을 때 실행을 제외시켜버리고
		// 프로그램이 중단이 되지 않도록 하자
		// 아래의 배열의 개수가 실행되도록 해라
		int[] num = new int[3];
		try {
			num[3] = 2;	// 문제가 생길 여지가 있는 코드 : 예외 시켰기 때문에 실행 안함
		} catch (Exception e) {
			// TODO Auto-generated catch block
			// e.printStackTrace();
			// 문제가 생기지 않으면 실행할 코드를 여기 넣으면 안됨...
			System.out.println("배열에 문제가 있음");
		}
		System.out.println(num.length);		// 배열의 길이
	}

}
// <나>
// 1. 예외처리를 왜하지?
// ==> 오류코드 이후의 코드를 처리하기 위해서
// 2. 에러는 컴파일에러, 실행에러가 있는데 둘 차이?
// ==> 컴파일에러는 프로그램 자체가 실행이 안되는거고
// 	      실행에러는 코드 실행중 오류가 난 코드로 인해서 코드 실행이 더이상 되지 않는것 
// 3. 자바에서 예외처리하는 방법
// ==> try-catch 또는 throw
// 4. 반드시 예외처리해야하는 경우는?
// ==> CPU 연결 - 외부자원연결, file, DB, device연결

// <답안>
//1. 예외처리를 왜하지?
// ==> 실행할 때 특정한 부분에서 에러가 나면 프로그램이 중단된다
//	   특정부분의 실행을 포기하고 프로그램을 중단시키지 않기 위해서
//2. 에러는 컴파일에러, 실행에러가 있는데 둘 차이?
//==> 컴파일(번역) 에러 : 영어코드(문법에러)---- 번역 ----> JVM
//	    실행(run-time) 에러 : 논리적 문제, 자원 연결 문제 JVM이 실행(***)
//3. 자바에서 예외처리하는 방법
//==> try-catch 또는 throw
//4. 반드시 예외처리해야하는 경우는? ==> 외부자원을 연결 (스트림을 사용할 때) - newt-work, file, DB, device연결